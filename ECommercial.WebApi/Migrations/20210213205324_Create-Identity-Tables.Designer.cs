// <auto-generated />
using System;
using ECommercial.DataAccess.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace ECommercial.WebApi.Migrations
{
    [DbContext(typeof(ECommercialContext))]
    [Migration("20210213205324_Create-Identity-Tables")]
    partial class CreateIdentityTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("ECommercial.Entities.concrete.Address", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<short?>("CityId")
                        .HasColumnName("city_id")
                        .HasColumnType("smallint");

                    b.Property<string>("ReceiverName")
                        .HasColumnName("receiver_name")
                        .HasColumnType("text");

                    b.Property<long?>("ReceiverNumber")
                        .HasColumnName("receiver_number")
                        .HasColumnType("bigint");

                    b.Property<string>("ReceiverSurname")
                        .HasColumnName("receiver_surname")
                        .HasColumnType("text");

                    b.Property<int?>("UserShopId")
                        .HasColumnName("user_shop_id")
                        .HasColumnType("integer");

                    b.Property<string>("address")
                        .HasColumnName("address")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("addresses","public");
                });

            modelBuilder.Entity("ECommercial.Entities.concrete.Bank", b =>
                {
                    b.Property<short?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("smallint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("text");

                    b.Property<string>("Eft")
                        .HasColumnName("eft")
                        .HasColumnType("text");

                    b.Property<string>("Fax")
                        .HasColumnName("fax")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("Swift")
                        .HasColumnName("swift")
                        .HasColumnType("text");

                    b.Property<string>("Telephone")
                        .HasColumnName("telephone")
                        .HasColumnType("text");

                    b.Property<string>("Telex")
                        .HasColumnName("telex")
                        .HasColumnType("text");

                    b.Property<string>("Web")
                        .HasColumnName("web")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("banks","public");
                });

            modelBuilder.Entity("ECommercial.Entities.concrete.Brand", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("brand")
                        .HasColumnName("brand")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("brands","public");
                });

            modelBuilder.Entity("ECommercial.Entities.concrete.Campaign", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnName("end_datetime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float?>("Rate")
                        .HasColumnName("rate")
                        .HasColumnType("real");

                    b.Property<DateTime?>("StartDateTime")
                        .HasColumnName("start_datetime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("campaigns","public");
                });

            modelBuilder.Entity("ECommercial.Entities.concrete.Category", b =>
                {
                    b.Property<short?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("smallint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("categories","public");
                });

            modelBuilder.Entity("ECommercial.Entities.concrete.City", b =>
                {
                    b.Property<short?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("smallint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("cities","public");
                });

            modelBuilder.Entity("ECommercial.Entities.concrete.Coupon", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<int?>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("coupons","public");
                });

            modelBuilder.Entity("ECommercial.Entities.concrete.District", b =>
                {
                    b.Property<short?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("smallint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<short?>("CityId")
                        .HasColumnName("city_id")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("districts","public");
                });

            modelBuilder.Entity("ECommercial.Entities.concrete.EntityFramework.ECUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ECommercial.Entities.concrete.Faq", b =>
                {
                    b.Property<short?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("smallint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Content")
                        .HasColumnName("content")
                        .HasColumnType("text");

                    b.Property<short?>("FaqSubcategoryId")
                        .HasColumnName("faq_subcategory_id")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("faqs","public");
                });

            modelBuilder.Entity("ECommercial.Entities.concrete.FaqCategory", b =>
                {
                    b.Property<short?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("smallint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("faq_subcategories","public");
                });

            modelBuilder.Entity("ECommercial.Entities.concrete.FaqSubCategory", b =>
                {
                    b.Property<short?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<short?>("FaqCategoryId")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FaqSubCategories");
                });

            modelBuilder.Entity("ECommercial.Entities.concrete.GeneralInfo", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnName("key")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("text");

                    b.HasKey("Key");

                    b.ToTable("general_infos","public");
                });

            modelBuilder.Entity("ECommercial.Entities.concrete.Invoice", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("text");

                    b.Property<short?>("CityId")
                        .HasColumnName("city_id")
                        .HasColumnType("smallint");

                    b.Property<string>("InvoiceeName")
                        .HasColumnName("invoicee_name")
                        .HasColumnType("text");

                    b.Property<long?>("InvoiceeNumber")
                        .HasColumnName("invoicee_number")
                        .HasColumnType("bigint");

                    b.Property<string>("InvoiceeSurname")
                        .HasColumnName("invoicee_surname")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnName("type")
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("invoices","public");
                });

            modelBuilder.Entity("ECommercial.Entities.concrete.Log", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Audit")
                        .HasColumnName("audit")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Date")
                        .HasColumnName("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Detail")
                        .HasColumnName("detail")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("logs","public");
                });

            modelBuilder.Entity("ECommercial.Entities.concrete.Order", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<int?>("ClaimAddressId")
                        .HasColumnName("claim_address_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Datetime")
                        .HasColumnName("datetime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("InvoiceId")
                        .HasColumnName("invoice_id")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("orders","public");
                });

            modelBuilder.Entity("ECommercial.Entities.concrete.OrderProduct", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<int?>("Count")
                        .HasColumnName("count")
                        .HasColumnType("integer");

                    b.Property<long?>("OrderId")
                        .HasColumnName("order_id")
                        .HasColumnType("bigint");

                    b.Property<int?>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("integer");

                    b.Property<int?>("State")
                        .HasColumnName("state")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("order_products","public");
                });

            modelBuilder.Entity("ECommercial.Entities.concrete.Product", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<long?>("Barcode")
                        .HasColumnName("barcode")
                        .HasColumnType("bigint");

                    b.Property<int?>("BrandId")
                        .HasColumnName("brand_id")
                        .HasColumnType("integer");

                    b.Property<string>("CargoCorporation")
                        .HasColumnName("cargo_corporation")
                        .HasColumnType("text");

                    b.Property<float?>("Commission")
                        .HasColumnName("commission")
                        .HasColumnType("real");

                    b.Property<short?>("Deci")
                        .HasColumnName("deci")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<short?>("Expiry")
                        .HasColumnName("expiry")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string[]>("Properties")
                        .HasColumnName("properties")
                        .HasColumnType("text[]");

                    b.Property<short?>("SubsubcategoryId")
                        .HasColumnName("subsubcategory_id")
                        .HasColumnType("smallint");

                    b.Property<float?>("VatRate")
                        .HasColumnName("vat_rate")
                        .HasColumnType("real");

                    b.Property<short?>("WarrantyPeriod")
                        .HasColumnName("warranty_period")
                        .HasColumnType("smallint");

                    b.Property<string>("WarrantyType")
                        .HasColumnName("warranty_type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("products","public");
                });

            modelBuilder.Entity("ECommercial.Entities.concrete.ProductCampaign", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<int?>("CampaignId")
                        .HasColumnName("campaign_id")
                        .HasColumnType("integer");

                    b.Property<int?>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("product_campaigns","public");
                });

            modelBuilder.Entity("ECommercial.Entities.concrete.ProductRate", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Datetime")
                        .HasColumnName("datetime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("HidUserInfoEnabled")
                        .HasColumnName("hid_user_info_enabled")
                        .HasColumnType("boolean");

                    b.Property<string[]>("Images")
                        .HasColumnName("images")
                        .HasColumnType("text[]");

                    b.Property<int?>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("integer");

                    b.Property<short?>("Rate")
                        .HasColumnName("rate")
                        .HasColumnType("smallint");

                    b.Property<int?>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("product_rates","public");
                });

            modelBuilder.Entity("ECommercial.Entities.concrete.Shop", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<long?>("AccountNumber")
                        .HasColumnName("account_number")
                        .HasColumnType("bigint");

                    b.Property<string>("AuthorizedEmail")
                        .HasColumnName("authorized_email")
                        .HasColumnType("text");

                    b.Property<bool?>("AuthorizedGender")
                        .HasColumnName("authorized_gender")
                        .HasColumnType("boolean");

                    b.Property<string>("AuthorizedName")
                        .HasColumnName("authorized_name")
                        .HasColumnType("text");

                    b.Property<long?>("AuthorizedPhone")
                        .HasColumnName("authorized_phone")
                        .HasColumnType("bigint");

                    b.Property<string>("AuthorizedPosition")
                        .HasColumnName("authorized_position")
                        .HasColumnType("text");

                    b.Property<string>("AuthorizedSurname")
                        .HasColumnName("authorized_surname")
                        .HasColumnType("text");

                    b.Property<string>("BankAccountOwner")
                        .HasColumnName("bank_account_owner")
                        .HasColumnType("text");

                    b.Property<short?>("BankId")
                        .HasColumnName("bank_id")
                        .HasColumnType("smallint");

                    b.Property<string>("BranchBankName")
                        .HasColumnName("branch_bank_name")
                        .HasColumnType("text");

                    b.Property<short?>("BranchCode")
                        .HasColumnName("branch_code")
                        .HasColumnType("smallint");

                    b.Property<int?>("CommercialRecordNumber")
                        .HasColumnName("commercial_record_number")
                        .HasColumnType("integer");

                    b.Property<string>("FirmEmail")
                        .HasColumnName("firm_email")
                        .HasColumnType("text");

                    b.Property<long?>("FirmFixedPhone")
                        .HasColumnName("firm_fixed_phone")
                        .HasColumnType("bigint");

                    b.Property<string>("FirmOwnerName")
                        .HasColumnName("firm_owner_name")
                        .HasColumnType("text");

                    b.Property<string>("FirmOwnerSurname")
                        .HasColumnName("firm_owner_surname")
                        .HasColumnType("text");

                    b.Property<string>("FirmProfile")
                        .HasColumnName("firm_profile")
                        .HasColumnType("text");

                    b.Property<string>("FirmType")
                        .HasColumnName("firm_type")
                        .HasColumnType("text");

                    b.Property<string>("FirmWebsite")
                        .HasColumnName("firm_website")
                        .HasColumnType("text");

                    b.Property<long?>("FırmOwnerPhone")
                        .HasColumnName("firm_owner_phone")
                        .HasColumnType("bigint");

                    b.Property<string>("Iban")
                        .HasColumnName("iban")
                        .HasColumnType("text");

                    b.Property<string>("InvoiceAddress")
                        .HasColumnName("invoice_address")
                        .HasColumnType("text");

                    b.Property<short?>("InvoiceCityId")
                        .HasColumnName("invoice_city_id")
                        .HasColumnType("smallint");

                    b.Property<short?>("InvoiceDistrictId")
                        .HasColumnName("invoice_district_id")
                        .HasColumnType("smallint");

                    b.Property<string>("InvoiceEmail")
                        .HasColumnName("invoice_email")
                        .HasColumnType("text");

                    b.Property<string>("KepMail")
                        .HasColumnName("kep_mail")
                        .HasColumnType("text");

                    b.Property<string>("LegalFirmName")
                        .HasColumnName("legal_firm_name")
                        .HasColumnType("text");

                    b.Property<long?>("MersisNumber")
                        .HasColumnName("mersis_number")
                        .HasColumnType("bigint");

                    b.Property<string>("Password")
                        .HasColumnName("password")
                        .HasColumnType("text");

                    b.Property<short?>("SellingSubcategoryId")
                        .HasColumnName("selling_subcategory_id")
                        .HasColumnType("smallint");

                    b.Property<string>("ShopOwnerName")
                        .HasColumnName("shop_owner_name")
                        .HasColumnType("text");

                    b.Property<short?>("TaxOfficeCityId")
                        .HasColumnName("tax_office_city_id")
                        .HasColumnType("smallint");

                    b.Property<short?>("TaxOfficeId")
                        .HasColumnName("tax_office_id")
                        .HasColumnType("smallint");

                    b.Property<long?>("TaxOrTrIdNumber")
                        .HasColumnName("tax_or_trid_number")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .HasColumnName("username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("shops","public");
                });

            modelBuilder.Entity("ECommercial.Entities.concrete.ShopProduct", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<short?>("DayForCargo")
                        .HasColumnName("day_for_cargo")
                        .HasColumnType("smallint");

                    b.Property<string[]>("Images")
                        .HasColumnName("images")
                        .HasColumnType("text[]");

                    b.Property<float?>("Price")
                        .HasColumnName("price")
                        .HasColumnType("real");

                    b.Property<int?>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("integer");

                    b.Property<float?>("ProductRating")
                        .HasColumnName("product_rating")
                        .HasColumnType("real");

                    b.Property<int?>("RatingCount")
                        .HasColumnName("rating_count")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ReleaseDatetime")
                        .HasColumnName("release_datetime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ShopId")
                        .HasColumnName("shop_id")
                        .HasColumnType("integer");

                    b.Property<string>("State")
                        .HasColumnName("state")
                        .HasColumnType("text");

                    b.Property<int?>("StockAmount")
                        .HasColumnName("stock_amount")
                        .HasColumnType("integer");

                    b.Property<string>("StockCode")
                        .HasColumnName("stock_code")
                        .HasColumnType("text");

                    b.Property<int?>("VariantGroupId")
                        .HasColumnName("variant_group_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("shop_products","public");
                });

            modelBuilder.Entity("ECommercial.Entities.concrete.Slide", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("ImageUrl")
                        .HasColumnName("image_url")
                        .HasColumnType("text");

                    b.Property<string>("RouteUrl")
                        .HasColumnName("route_url")
                        .HasColumnType("text");

                    b.Property<short?>("SlideOrder")
                        .HasColumnName("slide_order")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("slides","public");
                });

            modelBuilder.Entity("ECommercial.Entities.concrete.SubCategory", b =>
                {
                    b.Property<short?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("smallint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<short?>("CategoryId")
                        .HasColumnName("category_id")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("subcategories","public");
                });

            modelBuilder.Entity("ECommercial.Entities.concrete.SubSubCategory", b =>
                {
                    b.Property<short?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("smallint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<short?>("SubCategoryId")
                        .HasColumnName("subcategory_id")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("subsubcategories","public");
                });

            modelBuilder.Entity("ECommercial.Entities.concrete.TaxOffice", b =>
                {
                    b.Property<short?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("smallint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<int?>("AccountingUnitCode")
                        .HasColumnName("accounting_unit_code")
                        .HasColumnType("integer");

                    b.Property<short?>("CityId")
                        .HasColumnName("city_id")
                        .HasColumnType("smallint");

                    b.Property<short?>("DistrictId")
                        .HasColumnName("district_id")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("tax_offices","public");
                });

            modelBuilder.Entity("ECommercial.Entities.concrete.Test", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<char?>("Chr")
                        .HasColumnName("chr")
                        .HasColumnType("character(1)");

                    b.Property<int?>("Intgr")
                        .HasColumnName("intgr")
                        .HasColumnType("integer");

                    b.Property<string>("Varchr")
                        .HasColumnName("varchr")
                        .HasColumnType("text");

                    b.Property<string[]>("VarchrArray")
                        .HasColumnName("varchr_array")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.ToTable("tests");
                });

            modelBuilder.Entity("ECommercial.Entities.concrete.UserCoupon", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<int?>("CouponId")
                        .HasColumnName("coupon_id")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("user_coupons","public");
                });

            modelBuilder.Entity("ECommercial.Entities.concrete.UserFavouriteProduct", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<int?>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("user_favourite_products","public");
                });

            modelBuilder.Entity("ECommercial.Entities.concrete.UserProductWillBeOrdered", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<int?>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("user_products_will_be_ordered","public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ECommercial.Entities.concrete.EntityFramework.ECUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ECommercial.Entities.concrete.EntityFramework.ECUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercial.Entities.concrete.EntityFramework.ECUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ECommercial.Entities.concrete.EntityFramework.ECUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
